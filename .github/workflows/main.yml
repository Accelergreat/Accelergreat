name: Deploy to Production (Auto)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_NOLOGO: true
  BUILD_CONFIGURATION: Release

jobs:
  deploy-production:
    runs-on: ubuntu-latest
    name: Deploy Docs then NuGet to Production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: true
        fetch-depth: 0

    - name: Setup .NET SDKs
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: |
          6.0.x
          7.0.x
          8.0.x
          9.0.x

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Generate version
      id: version
      run: |
        # Read version from version.json
        VERSION=$(jq -r '.version' version.json)
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        
        # Replace version tokens in all files
        echo "Replacing version tokens in all files..."
        find . -name "*.json" -o -name "*.md" -o -name "*.props" | while read file; do
          if grep -q "~(version)~" "$file"; then
            echo "Replacing version in: $file"
            sed -i "s/~(version)~/${VERSION}/g" "$file"
          fi
        done

    - name: Restore dependencies
      run: dotnet restore Accelergreat.sln

    - name: Build solution
      run: dotnet build Accelergreat.sln --configuration ${{ env.BUILD_CONFIGURATION }} --no-restore

    - name: Pack NuGet packages
      run: |
        # Create output directory
        mkdir -p ./nuget-packages
        
        echo "Packing NuGet packages..."
        for project in $(find src/ -name "*.csproj" -type f); do
          echo "Packing project: $project"
          dotnet pack "$project" \
            --configuration ${{ env.BUILD_CONFIGURATION }} \
            --output ./nuget-packages \
            -p:PackageVersion=${{ steps.version.outputs.version }} \
            -p:Version=${{ steps.version.outputs.version }} \
            --verbosity normal
        done
        
        echo "Created packages:"
        ls -la ./nuget-packages/

    - name: Install npm dependencies
      run: npm install

    - name: Build documentation site
      run: npm run build

    - name: Verify documentation build output
      run: |
        echo "Checking _site directory contents:"
        if [ -d "_site" ]; then
          echo "_site directory exists"
          echo "Contents of _site:"
          ls -la _site/
          
          # Check if index.html exists at root
          if [ -f "_site/index.html" ]; then
            echo "✓ index.html found in _site root"
          else
            echo "✗ index.html NOT found in _site root"
            exit 1
          fi
          
          # Check if assets were copied
          echo "Checking for assets:"
          ls -la _site/accelergreat_icon.png _site/favicon.ico _site/styles/main.css || true
        else
          echo "ERROR: _site directory does not exist!"
          exit 1
        fi

    - name: Deploy to Azure Static Web Apps
      uses: Azure/static-web-apps-deploy@v1
      with:
        azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        action: "upload"
        app_location: "_site"
        skip_app_build: true
        production_branch: "main"

    - name: Deploy to NuGet
      run: |
        echo "Deploying NuGet packages..."
        dotnet nuget push "./nuget-packages/*.nupkg" \
          --api-key ${{ secrets.NUGET_API_KEY }} \
          --source https://api.nuget.org/v3/index.json \
          --skip-duplicate

