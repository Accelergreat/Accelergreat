name: Validate Version

on:
  pull_request:
    paths:
      - 'version.json'
  workflow_dispatch:

jobs:
  validate-version:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Validate version.json format
      run: |
        # Check if version.json is valid JSON
        if ! jq empty version.json 2>/dev/null; then
          echo "‚ùå version.json is not valid JSON"
          exit 1
        fi
        
        # Check required fields
        VERSION=$(jq -r '.version // empty' version.json)
        MAJOR=$(jq -r '.major // empty' version.json)
        MINOR=$(jq -r '.minor // empty' version.json)
        PATCH=$(jq -r '.patch // empty' version.json)
        
        if [ -z "$VERSION" ] || [ -z "$MAJOR" ] || [ -z "$MINOR" ] || [ -z "$PATCH" ]; then
          echo "‚ùå version.json missing required fields: version, major, minor, patch"
          exit 1
        fi
        
        # Validate version format
        if ! echo "$VERSION" | grep -E '^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?$'; then
          echo "‚ùå version format is invalid. Expected: MAJOR.MINOR.PATCH[-PRERELEASE]"
          exit 1
        fi
        
        # Check if version matches major.minor.patch
        EXPECTED_VERSION="$MAJOR.$MINOR.$PATCH"
        PRERELEASE=$(jq -r '.prerelease // empty' version.json)
        
        if [ -n "$PRERELEASE" ] && [ "$PRERELEASE" != "null" ]; then
          EXPECTED_VERSION="$EXPECTED_VERSION-$PRERELEASE"
        fi
        
        if [ "$VERSION" != "$EXPECTED_VERSION" ]; then
          echo "‚ùå version field ($VERSION) doesn't match major.minor.patch[$PRERELEASE] ($EXPECTED_VERSION)"
          exit 1
        fi
        
        # Check if numbers are valid integers
        if ! [[ "$MAJOR" =~ ^[0-9]+$ ]] || ! [[ "$MINOR" =~ ^[0-9]+$ ]] || ! [[ "$PATCH" =~ ^[0-9]+$ ]]; then
          echo "‚ùå major, minor, and patch must be non-negative integers"
          exit 1
        fi
        
        echo "‚úÖ version.json format is valid"
        echo "üìã Version: $VERSION"
        echo "üìã Major: $MAJOR, Minor: $MINOR, Patch: $PATCH"
        if [ -n "$PRERELEASE" ] && [ "$PRERELEASE" != "null" ]; then
          echo "üìã Prerelease: $PRERELEASE"
        fi

    - name: Check version increment (if PR)
      if: github.event_name == 'pull_request'
      run: |
        # Get the base version from main branch
        git fetch origin main
        BASE_VERSION=$(git show origin/main:version.json | jq -r '.version')
        CURRENT_VERSION=$(jq -r '.version' version.json)
        
        echo "üìã Base version (main): $BASE_VERSION"
        echo "üìã Current version (PR): $CURRENT_VERSION"
        
        # Extract version parts
        BASE_MAJOR=$(echo "$BASE_VERSION" | cut -d. -f1)
        BASE_MINOR=$(echo "$BASE_VERSION" | cut -d. -f2)
        BASE_PATCH=$(echo "$BASE_VERSION" | cut -d. -f3 | cut -d- -f1)
        
        CURRENT_MAJOR=$(jq -r '.major' version.json)
        CURRENT_MINOR=$(jq -r '.minor' version.json)
        CURRENT_PATCH=$(jq -r '.patch' version.json)
        
        # Check if version has increased
        if [ "$CURRENT_MAJOR" -gt "$BASE_MAJOR" ]; then
          echo "‚úÖ Major version increment detected"
        elif [ "$CURRENT_MAJOR" -eq "$BASE_MAJOR" ] && [ "$CURRENT_MINOR" -gt "$BASE_MINOR" ]; then
          echo "‚úÖ Minor version increment detected"
        elif [ "$CURRENT_MAJOR" -eq "$BASE_MAJOR" ] && [ "$CURRENT_MINOR" -eq "$BASE_MINOR" ] && [ "$CURRENT_PATCH" -gt "$BASE_PATCH" ]; then
          echo "‚úÖ Patch version increment detected"
        elif [ "$CURRENT_VERSION" == "$BASE_VERSION" ]; then
          echo "‚ö†Ô∏è  No version change detected"
        else
          echo "‚ùå Version must be incremented according to semantic versioning rules"
          echo "üí° Current: $CURRENT_VERSION, Base: $BASE_VERSION"
          exit 1
        fi

    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const version = JSON.parse(fs.readFileSync('version.json', 'utf8'));
          
          const comment = `## üîñ Version Validation
          
          **Version:** \`${version.version}\`
          **Components:** Major: \`${version.major}\`, Minor: \`${version.minor}\`, Patch: \`${version.patch}\`
          ${version.prerelease && version.prerelease !== 'null' ? `**Prerelease:** \`${version.prerelease}\`` : ''}
          
          ### Semantic Versioning Rules
          - **MAJOR**: Increment for incompatible API changes
          - **MINOR**: Increment for backward compatible functionality
          - **PATCH**: Increment for backward compatible bug fixes
          - **PRERELEASE**: For preview versions (alpha, beta, rc.1, etc.)
          
          ‚úÖ Version format is valid and follows semantic versioning.`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });