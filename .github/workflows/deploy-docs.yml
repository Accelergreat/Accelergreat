name: Deploy Documentation (Manual)

# This workflow deploys documentation to Azure Static Web Apps
# - Main branch: Deploys to production (https://docs.accelergreat.net)
# - Other branches: Automatically creates preview environments

on:
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_NOLOGO: true
  BUILD_CONFIGURATION: Release

jobs:
  deploy-docs:
    runs-on: ubuntu-latest
    name: Deploy Documentation
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: true
        fetch-depth: 0

    - name: Setup .NET SDKs
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: |
          6.0.x
          7.0.x
          8.0.x
          9.0.x

    - name: Generate version
      id: version
      run: |
        # Read base version from version.json
        BASE_VERSION=$(jq -r '.version' version.json)
        
        if [ "${{ github.ref }}" == "refs/heads/main" ]; then
          # For main branch, use the base version
          VERSION="${BASE_VERSION}"
        else
          # For non-main branches, add pre-release suffix
          SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
          VERSION="${BASE_VERSION}-beta.${SHORT_SHA}"
        fi
        
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "Deploying docs with version: ${VERSION}"
        
        # Replace version tokens in all files (matching original Azure DevOps pipeline)
        echo "Replacing version tokens in all files..."
        find . -name "*.json" -o -name "*.md" -o -name "*.props" | while read file; do
          if grep -q "~(version)~" "$file"; then
            echo "Replacing version in: $file"
            sed -i "s/~(version)~/${VERSION}/g" "$file"
          fi
        done

    - name: Restore dependencies
      run: dotnet restore Accelergreat.sln

    - name: Build solution
      run: dotnet build Accelergreat.sln --configuration ${{ env.BUILD_CONFIGURATION }} --no-restore

    - name: Install DocFX
      run: dotnet tool install -g docfx

    - name: Setup custom template
      run: |
        echo "Setting up custom Accelergreat template..."
        mkdir -p _exported_templates/accelergreat
        
        # Create a minimal template overlay for branding
        cat > _exported_templates/accelergreat/layout/_master.liquid << 'EOF'
        <!-- This is an overlay template that extends the default template -->
        EOF

    - name: Build documentation
      run: |
        echo "Building documentation with DocFX"
        docfx --warningsAsErrors false
        echo "DocFX build completed"

    - name: Verify documentation build output
      run: |
        echo "Checking _site directory contents:"
        if [ -d "_site" ]; then
          echo "_site directory exists"
          echo "Contents of _site:"
          ls -la _site/
          echo "Searching for all HTML files in _site:"
          find _site -name "*.html" -type f | head -20
          
          # Check if index.html exists at root
          if [ -f "_site/index.html" ]; then
            echo "✓ index.html found in _site root"
          else
            echo "✗ index.html NOT found in _site root"
            echo "All files in _site:"
            find _site -type f
          fi
          
          # Check if logo was copied
          echo "Checking for Accelergreat logo:"
          find _site -name "*accelergreat_icon*" -type f
        else
          echo "ERROR: _site directory does not exist!"
          echo "Current directory contents:"
          ls -la
          exit 1
        fi

    - name: Determine deployment environment
      id: deployment_env
      run: |
        if [ "${{ github.ref }}" == "refs/heads/main" ]; then
          echo "environment=Production" >> $GITHUB_OUTPUT
          echo "Deploying to Production"
        else
          echo "environment=Preview" >> $GITHUB_OUTPUT
          echo "Deploying to Preview environment for branch: ${GITHUB_REF#refs/heads/}"
        fi

    - name: Deploy to Azure Static Web Apps
      uses: Azure/static-web-apps-deploy@v1
      with:
        azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        action: "upload"
        app_location: "_site"
        skip_app_build: true
        production_branch: "main"